class SecureMessenger {
    constructor() {
        this.sodium = null;
        this.socket = null;
        this.myUserId = null;
        this.myUsername = null;
        this.identityKeyPair = null;
        this.signedPreKeyPair = null;
        this.signedPreKeySignature = null;
        this.sessionKeys = {};
        this.serverUrl = 'wss://opszcqxlinvqmofpelrm.supabase.co'; // –ó–ê–ú–ï–ù–ò–¢–ï –Ω–∞ –≤–∞—à URL!
        this.currentChat = null;
        this.chats = [];
        this.messages = {};
    }

    async init() {
        try {
            this.sodium = await window.sodium;
            console.log("Libsodium –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
            this.showSystemMessage("üîê –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", "system");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ libsodium:", error);
            this.showSystemMessage("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "error");
        }
    }

    async login() {
        const username = document.getElementById('usernameInput').value.trim();
        if (!username) {
            this.showSystemMessage("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "error");
            return;
        }

        this.myUsername = username;
        this.myUserId = username + '_' + Math.random().toString(36).substr(2, 8);
        
        document.getElementById('currentUser').textContent = username;
        document.getElementById('myUserId').textContent = this.myUserId;
        document.getElementById('loginSection').style.display = 'none';
        document.getElementById('chatSection').style.display = 'flex';

        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        this.showSystemMessage("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Secure Messenger!", "system");
        this.showSystemMessage("üîë –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–ª—é—á–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...", "system");

        await this.generateKeys();
        await this.uploadKeyBundle();
        this.connectWebSocket();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º —á–∞—Ç—ã –ø–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
        setTimeout(() => this.loadChats(), 1000);
        
        this.showSystemMessage("‚úÖ –ì–æ—Ç–æ–≤ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é!", "system");
        this.showSystemMessage("üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É", "system");
    }

    async generateKeys() {
        try {
            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä
            this.identityKeyPair = this.sodium.crypto_box_keypair();
            this.signedPreKeyPair = this.sodium.crypto_box_keypair();
            
            // –ü–æ–¥–ø–∏—Å—å Signed PreKey
            this.signedPreKeySignature = this.sodium.crypto_sign_detached(
                this.signedPreKeyPair.publicKey,
                this.identityKeyPair.privateKey
            );

            console.log("–ö–ª—é—á–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω—ã");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π:", error);
            this.showSystemMessage("‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∫–ª—é—á–µ–π –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "error");
            throw error;
        }
    }

    async uploadKeyBundle() {
        try {
            const bundle = {
                identityKey: this.sodium.to_base64(this.identityKeyPair.publicKey),
                signedPreKey: this.sodium.to_base64(this.signedPreKeyPair.publicKey),
                signature: this.sodium.to_base64(this.signedPreKeySignature),
                username: this.myUsername,
                timestamp: new Date().toISOString()
            };

            const response = await fetch(`https://your-render-app.onrender.com/keys/upload/${this.myUserId}`, {
                method: 'POST',
                headers: { 'Content-Type': 'application/json' },
                body: JSON.stringify(bundle)
            });

            if (response.ok) {
                console.log("–ö–ª—é—á–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –Ω–∞ —Å–µ—Ä–≤–µ—Ä");
            }
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–ª—é—á–µ–π:", error);
        }
    }

    connectWebSocket() {
        this.socket = new WebSocket(`${this.serverUrl}/ws/${this.myUserId}`);

        this.socket.onopen = () => {
            this.showSystemMessage("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ secure-—Å–µ—Ä–≤–µ—Ä—É —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ", "system");
        };

        this.socket.onmessage = async (event) => {
            try {
                const messageData = JSON.parse(event.data);
                await this.handleIncomingMessage(messageData);
            } catch (error) {
                console.error("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è:", error);
                this.showSystemMessage("‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Ö–æ–¥—è—â–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è", "error");
            }
        };

        this.socket.onclose = () => {
            this.showSystemMessage("üîå –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Ä–∞–∑–æ—Ä–≤–∞–Ω–æ. –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è...", "system");
            setTimeout(() => this.connectWebSocket(), 3000);
        };

        this.socket.onerror = (error) => {
            console.error("WebSocket error:", error);
            this.showSystemMessage("‚ùå –û—à–∏–±–∫–∞ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è", "error");
        };
    }

    async handleIncomingMessage(messageData) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–∏ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –æ–±—Ä–∞—Ç–Ω–æ)
        if (messageData.from === this.myUserId) return;

        // –ï—Å–ª–∏ —ç—Ç–æ –ø–µ—Ä–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è - –≤—ã–ø–æ–ª–Ω—è–µ–º X3DH
        if (!this.sessionKeys[messageData.from]) {
            try {
                this.showSystemMessage(`üîë –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é secure-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${messageData.from}...`, "system");
                await this.performX3DH(messageData.from);
                this.showSystemMessage(`‚úÖ Secure-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${messageData.from} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!`, "system");
                
                // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫
                this.addChatToList(messageData.from);
                
            } catch (error) {
                this.showSystemMessage(`‚ùå –û—à–∏–±–∫–∞ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ secure-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: ${error.message}`, "error");
                return;
            }
        }

        // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        try {
            const decrypted = this.decryptMessage(
                messageData.encrypted_message, 
                this.sessionKeys[messageData.from].rootKey
            );
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.saveMessageToHistory(messageData.from, {
                sender: messageData.from,
                text: decrypted,
                timestamp: new Date(),
                type: 'received'
            });
            
            this.showMessage(messageData.from, decrypted, "received");
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            this.updateChatList();
            
            // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            this.playNotificationSound();
            
        } catch (error) {
            console.error("Decryption error:", error);
            this.showSystemMessage(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∞—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç ${messageData.from}`, "error");
        }
    }

    async performX3DH(otherUserId) {
        try {
            this.showSystemMessage(`üì° –ó–∞–ø—Ä–∞—à–∏–≤–∞—é –∫–ª—é—á–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${otherUserId}...`, "system");
            
            // –ó–∞–ø—Ä–æ—Å bundle –¥—Ä—É–≥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const response = await fetch(`https://your-render-app.onrender.com/keys/bundle/${otherUserId}`);
            if (!response.ok) throw new Error("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –∫–ª—é—á–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã");
            
            const bundle = await response.json();
            const ikOther = this.sodium.from_base64(bundle.identityKey);
            const spkOther = this.sodium.from_base64(bundle.signedPreKey);
            const sigOther = this.sodium.from_base64(bundle.signature);

            // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∏
            this.showSystemMessage("üîç –ü—Ä–æ–≤–µ—Ä—è—é –ø–æ–¥–ø–∏—Å—å –∫–ª—é—á–µ–π...", "system");
            const isValid = this.sodium.crypto_sign_verify_detached(sigOther, spkOther, ikOther);
            if (!isValid) throw new Error("–ù–µ–≤–µ—Ä–Ω–∞—è –ø–æ–¥–ø–∏—Å—å –∫–ª—é—á–∞ - –≤–æ–∑–º–æ–∂–Ω–∞ –∞—Ç–∞–∫–∞!");

            // –ì–µ–Ω–µ—Ä–∞—Ü–∏—è ephemeral –∫–ª—é—á–∞
            this.showSystemMessage("üîë –ì–µ–Ω–µ—Ä–∏—Ä—É—é –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –∫–ª—é—á–∏...", "system");
            const ephKeyPair = this.sodium.crypto_box_keypair();

            // –í—ã—á–∏—Å–ª–µ–Ω–∏–µ –æ–±—â–∏—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
            this.showSystemMessage("‚ö° –í—ã—á–∏—Å–ª—è—é –æ–±—â–∏–π —Å–µ–∫—Ä–µ—Ç...", "system");
            const dh1 = this.sodium.crypto_scalarmult(this.identityKeyPair.privateKey, spkOther);
            const dh2 = this.sodium.crypto_scalarmult(ephKeyPair.privateKey, ikOther);
            const dh3 = this.sodium.crypto_scalarmult(ephKeyPair.privateKey, spkOther);

            // –°–æ–∑–¥–∞–Ω–∏–µ –º–∞—Å—Ç–µ—Ä-–∫–ª—é—á–∞
            const sharedSecret = new Uint8Array([...dh1, ...dh2, ...dh3]);
            const rootKey = this.sodium.crypto_generichash(32, sharedSecret);

            this.sessionKeys[otherUserId] = {
                rootKey: rootKey,
                ephemeralPrivate: ephKeyPair.privateKey,
                timestamp: Date.now()
            };

            return rootKey;

        } catch (error) {
            console.error("X3DH error:", error);
            throw error;
        }
    }

    async loadChats() {
        try {
            this.showSystemMessage("üìã –ó–∞–≥—Ä—É–∂–∞—é —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤...", "system");
            
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API
            // –ü–æ–∫–∞ –∏–º–∏—Ç–∏—Ä—É–µ–º –∑–∞–≥—Ä—É–∑–∫—É —á–∞—Ç–æ–≤
            await new Promise(resolve => setTimeout(resolve, 1000));
            
            // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ - –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            this.chats = [];
            this.renderChatList();
            
        } catch (error) {
            console.error("Error loading chats:", error);
            this.showSystemMessage("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —á–∞—Ç–æ–≤", "error");
        }
    }

    renderChatList() {
        const chatList = document.getElementById('chatList');
        if (!chatList) return;

        if (this.chats.length === 0) {
            chatList.innerHTML = `
                <div style="text-align: center; padding: 20px; color: #64748b;">
                    <p>–ß–∞—Ç–æ–≤ –ø–æ–∫–∞ –Ω–µ—Ç</p>
                    <p style="font-size: 12px; margin-top: 8px;">–ù–∞—á–Ω–∏—Ç–µ –æ–±—â–µ–Ω–∏–µ, –æ—Ç–ø—Ä–∞–≤–∏–≤ —Å–æ–æ–±—â–µ–Ω–∏–µ</p>
                </div>
            `;
            return;
        }

        chatList.innerHTML = this.chats.map(chat => `
            <div class="chat-item" onclick="messenger.openChat('${chat.userId}')" 
                 style="padding: 12px; border-bottom: 1px solid #e5e7eb; cursor: pointer; transition: background 0.2s;"
                 onmouseover="this.style.background='#f1f5f9'" 
                 onmouseout="this.style.background='transparent'">
                <div style="display: flex; justify-content: space-between; align-items: center;">
                    <strong style="color: #1f2937;">${chat.username}</strong>
                    <span style="font-size: 12px; color: #64748b;">${this.formatTime(chat.lastMessageTime)}</span>
                </div>
                <p style="margin: 4px 0 0 0; font-size: 14px; color: #64748b; overflow: hidden; text-overflow: ellipsis; white-space: nowrap;">
                    ${chat.lastMessage}
                </p>
            </div>
        `).join('');
    }

    addChatToList(userId) {
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ —Ç–∞–∫–æ–≥–æ —á–∞—Ç–∞
        if (!this.chats.some(chat => chat.userId === userId)) {
            this.chats.push({
                userId: userId,
                username: userId.split('_')[0], // –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∏–∑ ID
                lastMessage: '–ù–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ',
                lastMessageTime: new Date()
            });
            this.renderChatList();
        }
    }

    updateChatList() {
        // –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —á–∞—Ç–∞
        if (this.currentChat) {
            const chat = this.chats.find(c => c.userId === this.currentChat);
            if (chat) {
                chat.lastMessageTime = new Date();
                this.renderChatList();
            }
        }
    }

    async openChat(userId) {
        this.currentChat = userId;
        document.getElementById('recipientInput').value = userId;
        document.getElementById('chatTitle').textContent = `–ß–∞—Ç —Å ${userId.split('_')[0]}`;
        
        // –û—á–∏—â–∞–µ–º —á–∞—Ç
        this.clearChat();
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π
        await this.loadChatHistory(userId);
        
        this.showSystemMessage(`üí¨ –û—Ç–∫—Ä—ã—Ç —á–∞—Ç —Å ${userId.split('_')[0]}`, "system");
    }

    async loadChatHistory(userId) {
        try {
            // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã –∑–∞–ø—Ä–æ—Å –∫ API /messages
            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –∑–∞–≥—Ä—É–∑–∫–µ
            this.showSystemMessage("üïí –ó–∞–≥—Ä—É–∂–∞—é –∏—Å—Ç–æ—Ä–∏—é —Å–æ–æ–±—â–µ–Ω–∏–π...", "system");
            
            // –ò–º–∏—Ç–∞—Ü–∏—è –∑–∞–≥—Ä—É–∑–∫–∏
            await new Promise(resolve => setTimeout(resolve, 500));
            
            // –ï—Å–ª–∏ –µ—Å—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –∏—Å—Ç–æ—Ä–∏–∏ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∏—Ö
            if (this.messages[userId]) {
                this.messages[userId].forEach(msg => {
                    this.showMessage(msg.sender === this.myUserId ? "–í—ã" : msg.sender, msg.text, msg.type);
                });
            }
            
        } catch (error) {
            console.error("Error loading chat history:", error);
            this.showSystemMessage("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏—Å—Ç–æ—Ä–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π", "error");
        }
    }

    saveMessageToHistory(userId, message) {
        if (!this.messages[userId]) {
            this.messages[userId] = [];
        }
        this.messages[userId].push(message);
    }

    encryptMessage(plaintext, key) {
        const nonce = this.sodium.randombytes_buf(this.sodium.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES);
        const ciphertext = this.sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(
            plaintext,
            null,
            null,
            nonce,
            key
        );

        const combined = new Uint8Array(nonce.length + ciphertext.length);
        combined.set(nonce);
        combined.set(ciphertext, nonce.length);

        return this.sodium.to_base64(combined);
    }

    decryptMessage(encodedMessage, key) {
        const combined = this.sodium.from_base64(encodedMessage);
        const nonce = combined.slice(0, this.sodium.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES);
        const ciphertext = combined.slice(this.sodium.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES);

        try {
            const decrypted = this.sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(
                null,
                ciphertext,
                null,
                nonce,
                key
            );
            return this.sodium.to_string(decrypted);
        } catch (error) {
            throw new Error("Decryption failed");
        }
    }

    async sendMessage() {
        const recipientId = document.getElementById('recipientInput').value.trim();
        const messageText = document.getElementById('messageInput').value.trim();

        if (!recipientId) {
            this.showSystemMessage("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è", "error");
            return;
        }

        if (!messageText) {
            this.showSystemMessage("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "error");
            return;
        }

        try {
            // –ï—Å–ª–∏ —Å–µ—Å—Å–∏—è –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞ - –≤—ã–ø–æ–ª–Ω—è–µ–º X3DH
            if (!this.sessionKeys[recipientId]) {
                this.showSystemMessage(`üîë –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é secure-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${recipientId}...`, "system");
                await this.performX3DH(recipientId);
                this.showSystemMessage(`‚úÖ Secure-—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å ${recipientId} —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ!`, "system");
                
                // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫
                this.addChatToList(recipientId);
            }

            // –®–∏—Ñ—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            const encrypted = this.encryptMessage(messageText, this.sessionKeys[recipientId].rootKey);
            
            this.socket.send(JSON.stringify({
                to: recipientId,
                from: this.myUserId,
                encrypted_message: encrypted
            }));

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.saveMessageToHistory(recipientId, {
                sender: this.myUserId,
                text: messageText,
                timestamp: new Date(),
                type: 'sent'
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É —Å–µ–±—è
            this.showMessage("–í—ã", messageText, "sent");
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            this.updateChatList();
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            document.getElementById('messageInput').value = '';
            
            // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            document.getElementById('messageInput').focus();

        } catch (error) {
            console.error("Send error:", error);
            this.showSystemMessage(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`, "error");
        }
    }

    showSystemMessage(text, type) {
        this.addMessageToChatbox("–°–∏—Å—Ç–µ–º–∞", text, type);
    }

    showMessage(sender, text, type) {
        this.addMessageToChatbox(sender, text, type);
    }

    addMessageToChatbox(sender, text, cssClass) {
        const chatbox = document.getElementById('chatbox');
        const messageElement = document.createElement('div');
        messageElement.className = `message ${cssClass}`;
        
        // –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
        const formattedText = this.formatMessage(text);
        const displayName = sender === this.myUserId ? "–í—ã" : sender;
        
        messageElement.innerHTML = `<strong>${displayName}:</strong> ${formattedText}`;
        
        // –ê–Ω–∏–º–∞—Ü–∏—è –ø–æ—è–≤–ª–µ–Ω–∏—è
        messageElement.style.opacity = '0';
        messageElement.style.transform = 'translateY(10px)';
        messageElement.style.transition = 'all 0.3s ease';
        
        chatbox.appendChild(messageElement);
        chatbox.scrollTop = chatbox.scrollHeight;
        
        // –ê–Ω–∏–º–∏—Ä—É–µ–º –ø–æ—è–≤–ª–µ–Ω–∏–µ
        setTimeout(() => {
            messageElement.style.opacity = '1';
            messageElement.style.transform = 'translateY(0)';
        }, 10);
    }

    clearChat() {
        const chatbox = document.getElementById('chatbox');
        if (chatbox) {
            chatbox.innerHTML = '';
        }
    }

    formatMessage(text) {
        // –ü—Ä–æ—Å—Ç–æ–µ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞
        return text
            .replace(/\n/g, '<br>')
            .replace(/(https?:\/\/[^\s]+)/g, '<a href="$1" target="_blank" style="color: inherit; text-decoration: underline;">$1</a>');
    }

    formatTime(date) {
        if (!(date instanceof Date)) {
            date = new Date(date);
        }
        return date.toLocaleTimeString('ru-RU', { 
            hour: '2-digit', 
            minute: '2-digit' 
        });
    }

    playNotificationSound() {
        // –ü—Ä–æ—Å—Ç–æ–π –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
        try {
            const context = new (window.AudioContext || window.webkitAudioContext)();
            const oscillator = context.createOscillator();
            const gainNode = context.createGain();
            
            oscillator.connect(gainNode);
            gainNode.connect(context.destination);
            
            oscillator.frequency.value = 800;
            gainNode.gain.value = 0.1;
            
            oscillator.start();
            oscillator.stop(context.currentTime + 0.1);
        } catch (error) {
            console.log("Audio not supported");
        }
    }

    copyUserId() {
        navigator.clipboard.writeText(this.myUserId).then(() => {
            this.showSystemMessage("‚úÖ ID —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –±—É—Ñ–µ—Ä –æ–±–º–µ–Ω–∞", "system");
        }).catch(err => {
            this.showSystemMessage("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å ID", "error");
        });
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
const messenger = new SecureMessenger();

// –ó–∞–≥—Ä—É–∑–∫–∞ libsodium –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.addEventListener('load', async () => {
    await messenger.init();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML –∫–Ω–æ–ø–æ–∫
function login() {
    messenger.login();
}

function sendMessage() {
    messenger.sendMessage();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter
document.getElementById('messageInput')?.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        sendMessage();
    }
});

document.getElementById('recipientInput')?.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        document.getElementById('messageInput').focus();
    }
});

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ID –ø–æ –∫–ª–∏–∫—É
document.addEventListener('click', function(e) {
    if (e.target.id === 'myUserId') {
        messenger.copyUserId();
    }
});

// –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω - —Å–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º sidebar –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
function handleResize() {
    const sidebar = document.querySelector('.chat-sidebar');
    const mainArea = document.querySelector('.main-chat-area');
    
    if (window.innerWidth <= 768) {
        sidebar.style.display = 'none';
        mainArea.style.flex = '1';
    } else {
        sidebar.style.display = 'flex';
        mainArea.style.flex = '1';
    }
}

window.addEventListener('resize', handleResize);
window.addEventListener('load', handleResize);
