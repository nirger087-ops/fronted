class SecureMessenger {
    constructor() {
        this.sodium = null;
        this.socket = null;
        this.myUserId = null;
        this.myUsername = null;
        this.identityKeyPair = null;
        this.signedPreKeyPair = null;
        this.signedPreKeySignature = null;
        this.sessionKeys = {};
        this.serverUrl = 'wss://secure-messenger-backend-xjvb.onrender.com';
        this.currentChat = null;
        this.chats = [];
        this.messages = {};
        
        // –ù–æ–≤—ã–µ —Å–≤–æ–π—Å—Ç–≤–∞ –¥–ª—è –ø—É–ª–∞ –∫–ª—é—á–µ–π
        this.keyPool = {}; // { userId: [key1, key2, ...] }
        this.usedKeys = new Set(); // track used key IDs
        this.keyPoolSize = 1000; // –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–ª—é—á–µ–π –≤ –ø—É–ª–µ
    }

    async init() {
        try {
            this.sodium = await window.sodium;
            console.log("Libsodium –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ");
            this.showSystemMessage("üîê –ö—Ä–∏–ø—Ç–æ–≥—Ä–∞—Ñ–∏—á–µ—Å–∫–∞—è —Å–∏—Å—Ç–µ–º–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞", "system");
        } catch (error) {
            console.error("–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ libsodium:", error);
            this.showSystemMessage("‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–∏—Å—Ç–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏", "error");
        }
    }

    async checkServerConnection() {
        try {
            const API_BASE = this.serverUrl.replace('wss://', 'https://').replace('/ws', '');
            const response = await fetch(`${API_BASE}/health`, {
                method: 'GET',
                mode: 'cors'
            });
            
            if (response.ok) {
                const health = await response.json();
                this.showSystemMessage(`‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω. –°—Ç–∞—Ç—É—Å: ${health.status}`, "system");
                return true;
            } else {
                this.showSystemMessage("‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω", "error");
                return false;
            }
        } catch (error) {
            this.showSystemMessage("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Å–µ—Ä–≤–µ—Ä—É", "error");
            return false;
        }
    }

    async login() {
        const username = document.getElementById('usernameInput').value.trim();
        if (!username) {
            this.showSystemMessage("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ –∏–º—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è", "error");
            return;
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å —Å–µ—Ä–≤–µ—Ä–æ–º
        const serverAvailable = await this.checkServerConnection();
        if (!serverAvailable) {
            this.showSystemMessage("‚ö†Ô∏è –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ.", "error");
            return;
        }

        this.myUsername = username;
        this.myUserId = username + '_' + Math.random().toString(36).substr(2, 8);
        
        document.getElementById('currentUser').textContent = username;
        document.getElementById('myUserId').textContent = this.myUserId;
        document.getElementById('loginSection').style.display = 'none';
        document.getElementById('chatSection').style.display = 'flex';

        this.showSystemMessage("üéâ –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Secure Messenger!", "system");
        this.showSystemMessage("üîë –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∫–ª—é—á–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...", "system");

        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø—É–ª –∫–ª—é—á–µ–π –≤–º–µ—Å—Ç–æ X3DH
        await this.generateKeyPool();
        this.connectWebSocket();
        
        setTimeout(() => this.loadChats(), 1000);
        
        this.showSystemMessage("‚úÖ –ì–æ—Ç–æ–≤ –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ–º—É –æ–±—â–µ–Ω–∏—é!", "system");
        this.showSystemMessage("üìã –°–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤–∞—à ID –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å–æ–±–µ—Å–µ–¥–Ω–∏–∫—É", "system");
    }

    async generateKeyPool() {
        try {
            this.showSystemMessage("üîë –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø—É–ª –∫–ª—é—á–µ–π...", "system");
            
            const pool = [];
            for (let i = 0; i < this.keyPoolSize; i++) {
                const key = this.sodium.crypto_aead_xchacha20poly1305_ietf_keygen();
                pool.push({
                    id: i,
                    key: key,
                    used: false
                });
            }
            
            this.keyPool[this.myUserId] = pool;
            this.showSystemMessage(`‚úÖ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ ${this.keyPoolSize} –∫–ª—é—á–µ–π`, "system");
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—É–ª –∫–ª—é—á–µ–π –Ω–∞ —Å–µ—Ä–≤–µ—Ä
            await this.uploadKeyPool();
            
        } catch (error) {
            console.error("Key pool generation error:", error);
            this.showSystemMessage("‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–µ–π", "error");
        }
    }

    async uploadKeyPool() {
        try {
            const poolData = this.keyPool[this.myUserId].map(item => ({
                id: item.id,
                key: this.sodium.to_base64(item.key)
            }));

            const API_BASE = this.serverUrl.replace('wss://', 'https://').replace('/ws', '');
            const response = await fetch(`${API_BASE}/keypool/upload/${this.myUserId}`, {
                method: 'POST',
                headers: { 
                    'Content-Type': 'application/json',
                    'Accept': 'application/json'
                },
                body: JSON.stringify({ keys: poolData }),
                mode: 'cors'
            });

            if (response.ok) {
                this.showSystemMessage("‚úÖ –ü—É–ª –∫–ª—é—á–µ–π –∑–∞–≥—Ä—É–∂–µ–Ω –Ω–∞ —Å–µ—Ä–≤–µ—Ä", "system");
            }
        } catch (error) {
            console.error("Key pool upload error:", error);
        }
    }

    async downloadKeyPool(userId) {
        try {
            const API_BASE = this.serverUrl.replace('wss://', 'https://').replace('/ws', '');
            const response = await fetch(`${API_BASE}/keypool/download/${userId}`, {
                method: 'GET',
                headers: { 'Content-Type': 'application/json' },
                mode: 'cors'
            });

            if (response.ok) {
                const data = await response.json();
                const pool = data.keys.map(item => ({
                    id: item.id,
                    key: this.sodium.from_base64(item.key),
                    used: false
                }));
                
                this.keyPool[userId] = pool;
                this.showSystemMessage(`‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω –ø—É–ª –∫–ª—é—á–µ–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`, "system");
                return true;
            }
            return false;
        } catch (error) {
            console.error("Key pool download error:", error);
            return false;
        }
    }

    encryptMessageWithRandomKey(plaintext, userId) {
        try {
            const pool = this.keyPool[userId];
            if (!pool || pool.length === 0) {
                throw new Error("No keys available for encryption");
            }

            // –ò—â–µ–º –Ω–µ–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π –∫–ª—é—á
            const availableKeys = pool.filter(key => !key.used);
            if (availableKeys.length === 0) {
                throw new Error("All keys have been used");
            }

            // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –∫–ª—é—á
            const randomIndex = Math.floor(Math.random() * availableKeys.length);
            const selectedKey = availableKeys[randomIndex];
            
            // –ü–æ–º–µ—á–∞–µ–º –∫–ª—é—á –∫–∞–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã–π
            selectedKey.used = true;
            this.usedKeys.add(selectedKey.id);

            // –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            const nonce = this.sodium.randombytes_buf(this.sodium.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES);
            const ciphertext = this.sodium.crypto_aead_xchacha20poly1305_ietf_encrypt(
                plaintext,
                null,
                null,
                nonce,
                selectedKey.key
            );

            // –ö–æ–º–±–∏–Ω–∏—Ä—É–µ–º nonce + ciphertext + key ID
            const combined = new Uint8Array(nonce.length + ciphertext.length + 4);
            combined.set(nonce);
            combined.set(ciphertext, nonce.length);
            
            // –î–æ–±–∞–≤–ª—è–µ–º ID –∫–ª—é—á–∞ (4 –±–∞–π—Ç–∞)
            const keyIdBytes = new Uint8Array(new Uint32Array([selectedKey.id]).buffer);
            combined.set(keyIdBytes, nonce.length + ciphertext.length);

            return this.sodium.to_base64(combined);
            
        } catch (error) {
            console.error("Encryption error:", error);
            throw error;
        }
    }

    decryptMessageWithKeyId(encodedMessage, userId) {
        try {
            const combined = this.sodium.from_base64(encodedMessage);
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã
            const nonce = combined.slice(0, this.sodium.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES);
            const ciphertext = combined.slice(
                this.sodium.crypto_aead_xchacha20poly1305_ietf_NPUBBYTES, 
                combined.length - 4
            );
            
            // –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∫–ª—é—á–∞ (–ø–æ—Å–ª–µ–¥–Ω–∏–µ 4 –±–∞–π—Ç–∞)
            const keyIdBytes = combined.slice(combined.length - 4);
            const keyId = new Uint32Array(keyIdBytes.buffer)[0];
            
            // –ù–∞—Ö–æ–¥–∏–º –∫–ª—é—á –ø–æ ID
            const pool = this.keyPool[userId];
            if (!pool) {
                throw new Error("Key pool not found");
            }
            
            const keyData = pool.find(key => key.id === keyId);
            if (!keyData) {
                throw new Error(`Key with ID ${keyId} not found`);
            }

            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
            const decrypted = this.sodium.crypto_aead_xchacha20poly1305_ietf_decrypt(
                null,
                ciphertext,
                null,
                nonce,
                keyData.key
            );
            
            return this.sodium.to_string(decrypted);
            
        } catch (error) {
            console.error("Decryption error:", error);
            throw error;
        }
    }

    async sendMessage() {
        const recipientId = document.getElementById('recipientInput').value.trim();
        const messageText = document.getElementById('messageInput').value.trim();

        if (!recipientId) {
            this.showSystemMessage("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ ID –ø–æ–ª—É—á–∞—Ç–µ–ª—è", "error");
            return;
        }

        if (!messageText) {
            this.showSystemMessage("‚ö†Ô∏è –í–≤–µ–¥–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", "error");
            return;
        }

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É–ª –∫–ª—é—á–µ–π –ø–æ–ª—É—á–∞—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
            if (!this.keyPool[recipientId]) {
                this.showSystemMessage("üì• –ó–∞–≥—Ä—É–∂–∞—é –∫–ª—é—á–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è...", "system");
                const success = await this.downloadKeyPool(recipientId);
                if (!success) {
                    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á–∏ –ø–æ–ª—É—á–∞—Ç–µ–ª—è");
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫
                this.addChatToList(recipientId);
            }

            // –®–∏—Ñ—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            const encrypted = this.encryptMessageWithRandomKey(messageText, recipientId);
            
            // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º
            this.socket.send(JSON.stringify({
                to: recipientId,
                from: this.myUserId,
                encrypted_message: encrypted
            }));

            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.saveMessageToHistory(recipientId, {
                sender: this.myUserId,
                text: messageText,
                timestamp: new Date(),
                type: 'sent'
            });

            // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —É —Å–µ–±—è
            this.showMessage("–í—ã", messageText, "sent");
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            this.updateChatList();
            
            // –û—á–∏—â–∞–µ–º –ø–æ–ª–µ –≤–≤–æ–¥–∞
            document.getElementById('messageInput').value = '';
            
            // –§–æ–∫—É—Å–∏—Ä—É–µ–º—Å—è –æ–±—Ä–∞—Ç–Ω–æ –Ω–∞ –ø–æ–ª–µ –≤–≤–æ–¥–∞
            document.getElementById('messageInput').focus();

        } catch (error) {
            console.error("Send error:", error);
            this.showSystemMessage(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: ${error.message}`, "error");
        }
    }

    async handleIncomingMessage(messageData) {
        // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–≤–æ–∏ –∂–µ —Å–æ–æ–±—â–µ–Ω–∏—è (–µ—Å–ª–∏ –æ–Ω–∏ –ø—Ä–∏—Ö–æ–¥—è—Ç –æ–±—Ä–∞—Ç–Ω–æ)
        if (messageData.from === this.myUserId) return;

        try {
            // –ó–∞–≥—Ä—É–∂–∞–µ–º –ø—É–ª –∫–ª—é—á–µ–π –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è, –µ—Å–ª–∏ –µ—â–µ –Ω–µ—Ç
            if (!this.keyPool[messageData.from]) {
                this.showSystemMessage("üì• –ó–∞–≥—Ä—É–∂–∞—é –∫–ª—é—á–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è...", "system");
                const success = await this.downloadKeyPool(messageData.from);
                if (!success) {
                    throw new Error("–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –∫–ª—é—á–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è");
                }
                
                // –î–æ–±–∞–≤–ª—è–µ–º —á–∞—Ç –≤ —Å–ø–∏—Å–æ–∫
                this.addChatToList(messageData.from);
            }

            // –†–∞—Å—à–∏—Ñ—Ä–æ–≤—ã–≤–∞–µ–º
            const decrypted = this.decryptMessageWithKeyId(
                messageData.encrypted_message, 
                messageData.from
            );
            
            // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –∏—Å—Ç–æ—Ä–∏—é
            this.saveMessageToHistory(messageData.from, {
                sender: messageData.from,
                text: decrypted,
                timestamp: new Date(),
                type: 'received'
            });
            
            this.showMessage(messageData.from, decrypted, "received");
            
            // –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤
            this.updateChatList();
            
            // –ü—Ä–æ–∏–≥—Ä—ã–≤–∞–µ–º –∑–≤—É–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
            this.playNotificationSound();
            
        } catch (error) {
            console.error("Message handling error:", error);
            this.showSystemMessage(`‚ùå –û—à–∏–±–∫–∞ —Ä–∞—Å—à–∏—Ñ—Ä–æ–≤–∫–∏: ${error.message}`, "error");
        }
    }

    // –û—Å—Ç–∞–ª—å–Ω—ã–µ –º–µ—Ç–æ–¥—ã –æ—Å—Ç–∞—é—Ç—Å—è –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π
    async performX3DH(otherUserId) {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    }

    async loadChats() {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    }

    renderChatList() {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    }

    addChatToList(userId) {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    }

    updateChatList() {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    }

    async openChat(userId) {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    }

    async loadChatHistory(userId) {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    }

    saveMessageToHistory(userId, message) {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    }

    showSystemMessage(text, type) {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    }

    showMessage(sender, text, type) {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    }

    addMessageToChatbox(sender, text, cssClass) {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    }

    clearChat() {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    }

    formatMessage(text) {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    }

    formatTime(date) {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    }

    playNotificationSound() {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    }

    copyUserId() {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    }

    connectWebSocket() {
        // ... —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥
    }
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–µ—Å—Å–µ–Ω–¥–∂–µ—Ä–∞
const messenger = new SecureMessenger();

// –ó–∞–≥—Ä—É–∑–∫–∞ libsodium –∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
window.addEventListener('load', async () => {
    await messenger.init();
});

// –ì–ª–æ–±–∞–ª—å–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è HTML –∫–Ω–æ–ø–æ–∫
function login() {
    messenger.login();
}

function sendMessage() {
    messenger.sendMessage();
}

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è Enter
document.getElementById('messageInput')?.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        sendMessage();
    }
});

document.getElementById('recipientInput')?.addEventListener('keypress', function(e) {
    if (e.key === 'Enter') {
        document.getElementById('messageInput').focus();
    }
});

// –ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ ID –ø–æ –∫–ª–∏–∫—É
document.addEventListener('click', function(e) {
    if (e.target.id === 'myUserId') {
        messenger.copyUserId();
    }
});

// –ê–¥–∞–ø—Ç–∏–≤–Ω—ã–π –¥–∏–∑–∞–π–Ω - —Å–∫—Ä—ã–≤–∞–µ–º/–ø–æ–∫–∞–∑—ã–≤–∞–µ–º sidebar –Ω–∞ –º–æ–±–∏–ª—å–Ω—ã—Ö
function handleResize() {
    const sidebar = document.querySelector('.chat-sidebar');
    const mainArea = document.querySelector('.main-chat-area');
    
    if (window.innerWidth <= 768) {
        sidebar.style.display = 'none';
        mainArea.style.flex = '1';
    } else {
        sidebar.style.display = 'flex';
        mainArea.style.flex = '1';
    }
}

window.addEventListener('resize', handleResize);
window.addEventListener('load', handleResize);
